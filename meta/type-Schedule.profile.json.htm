<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
 <title>Example Instance for type-Schedule.profile</title>
 <link rel="Stylesheet" href="fhir.css" type="text/css" media="screen"/>
</head>
<body>
<p>&nbsp;</p>
<div class="example">
<p>Profile for Schedule</p>
<p><a href="type-Schedule.profile.json">Raw JSON</a></p>
<pre class="json">
{
  &quot;Profile&quot;:{
    &quot;text&quot;:{
      &quot;status&quot;:{
        &quot;value&quot;:&quot;generated&quot;
      },
      &quot;div&quot;:&quot;&lt;div&gt;&lt;div&gt;Type definition for Schedule from &lt;a href=\&quot;http://hl7.org/fhir/datatypes.htm#Schedule\&quot;&gt;FHIR Specification&lt;\/a&gt;&lt;\/div&gt;&lt;\/div&gt;&quot;
    },
    &quot;name&quot;:{
      &quot;value&quot;:&quot;Basic Profile for Schedule&quot;
    },
    &quot;publisher&quot;:{
      &quot;value&quot;:&quot;FHIR Specification&quot;
    },
    &quot;description&quot;:{
      &quot;value&quot;:&quot;Basic Profile for Schedule for validation support&quot;
    },
    &quot;status&quot;:{
      &quot;value&quot;:&quot;draft&quot;
    },
    &quot;date&quot;:{
      &quot;value&quot;:&quot;2013-08-13&quot;
    },
    &quot;structure&quot;:[
      {
        &quot;type&quot;:{
          &quot;value&quot;:&quot;Schedule&quot;
        },
        &quot;element&quot;:[
          {
            &quot;path&quot;:{
              &quot;value&quot;:&quot;Schedule&quot;
            },
            &quot;definition&quot;:{
              &quot;short&quot;:{
                &quot;value&quot;:&quot;A schedule that specifies an event that may occur multiple times&quot;
              },
              &quot;formal&quot;:{
                &quot;value&quot;:&quot;A schedule that specifies an event that may occur multiple times. Schedules are not used for recording when things did happen, but when they are expected or requested to occur.&quot;
              },
              &quot;comments&quot;:{
                &quot;value&quot;:&quot;A schedule can be either a list of events - intervals on which the event occurs, or a single event with repeating criteria or just repeating criteria with no actual event.&quot;
              },
              &quot;min&quot;:{
                &quot;value&quot;:1
              },
              &quot;max&quot;:{
                &quot;value&quot;:&quot;1&quot;
              },
              &quot;type&quot;:[
                {
                  &quot;code&quot;:{
                    &quot;value&quot;:&quot;Structure&quot;
                  }
                }
              ],
              &quot;condition&quot;:[
                
              ],
              &quot;constraint&quot;:[
                {
                  &quot;key&quot;:{
                    &quot;value&quot;:&quot;1&quot;
                  },
                  &quot;name&quot;:{
                    &quot;value&quot;:&quot;Multiple or repeating events&quot;
                  },
                  &quot;severity&quot;:{
                    &quot;value&quot;:&quot;error&quot;
                  },
                  &quot;human&quot;:{
                    &quot;value&quot;:&quot;There can only be a repeat element if there is none or one event&quot;
                  },
                  &quot;xpath&quot;:{
                    &quot;value&quot;:&quot;not(exists(f:repeat)) or count(f:event) &lt; 2&quot;
                  }
                }
              ],
              &quot;isModifier&quot;:{
                &quot;value&quot;:false
              },
              &quot;mapping&quot;:[
                {
                  &quot;target&quot;:{
                    &quot;value&quot;:&quot;http://hl7.org/v3&quot;
                  },
                  &quot;map&quot;:{
                    &quot;value&quot;:&quot;GTS&quot;
                  }
                }
              ]
            }
          },
          {
            &quot;path&quot;:{
              &quot;value&quot;:&quot;Schedule.event&quot;
            },
            &quot;definition&quot;:{
              &quot;short&quot;:{
                &quot;value&quot;:&quot;When the event occurs&quot;
              },
              &quot;formal&quot;:{
                &quot;value&quot;:&quot;Identifies specific time periods when the event should occur.&quot;
              },
              &quot;min&quot;:{
                &quot;value&quot;:0
              },
              &quot;max&quot;:{
                &quot;value&quot;:&quot;*&quot;
              },
              &quot;type&quot;:[
                {
                  &quot;code&quot;:{
                    &quot;value&quot;:&quot;Period&quot;
                  }
                }
              ],
              &quot;condition&quot;:[
                
              ],
              &quot;isModifier&quot;:{
                &quot;value&quot;:false
              }
            }
          },
          {
            &quot;path&quot;:{
              &quot;value&quot;:&quot;Schedule.repeat&quot;
            },
            &quot;definition&quot;:{
              &quot;short&quot;:{
                &quot;value&quot;:&quot;Only if there is none or one event&quot;
              },
              &quot;formal&quot;:{
                &quot;value&quot;:&quot;Identifies a repeating pattern to the intended time periods.&quot;
              },
              &quot;comments&quot;:{
                &quot;value&quot;:&quot;If present, the Schedule.event indicates the time of the first occurrence.&quot;
              },
              &quot;min&quot;:{
                &quot;value&quot;:0
              },
              &quot;max&quot;:{
                &quot;value&quot;:&quot;1&quot;
              },
              &quot;condition&quot;:[
                
              ],
              &quot;constraint&quot;:[
                {
                  &quot;key&quot;:{
                    &quot;value&quot;:&quot;3&quot;
                  },
                  &quot;name&quot;:{
                    &quot;value&quot;:&quot;End condition&quot;
                  },
                  &quot;severity&quot;:{
                    &quot;value&quot;:&quot;error&quot;
                  },
                  &quot;human&quot;:{
                    &quot;value&quot;:&quot;At most, only one of count and end can be present&quot;
                  },
                  &quot;xpath&quot;:{
                    &quot;value&quot;:&quot;not(exists(f:count) and exists(f:end))&quot;
                  }
                },
                {
                  &quot;key&quot;:{
                    &quot;value&quot;:&quot;2&quot;
                  },
                  &quot;name&quot;:{
                    &quot;value&quot;:&quot;Repeat cycle&quot;
                  },
                  &quot;severity&quot;:{
                    &quot;value&quot;:&quot;error&quot;
                  },
                  &quot;human&quot;:{
                    &quot;value&quot;:&quot;Either frequency or when must be present, but not both&quot;
                  },
                  &quot;xpath&quot;:{
                    &quot;value&quot;:&quot;exists(f:frequency) != exists(f:when)&quot;
                  }
                }
              ],
              &quot;isModifier&quot;:{
                &quot;value&quot;:false
              }
            }
          },
          {
            &quot;path&quot;:{
              &quot;value&quot;:&quot;Schedule.repeat.frequency&quot;
            },
            &quot;definition&quot;:{
              &quot;short&quot;:{
                &quot;value&quot;:&quot;Event occurs frequency times per duration&quot;
              },
              &quot;formal&quot;:{
                &quot;value&quot;:&quot;Indicates how often the event should occur.&quot;
              },
              &quot;min&quot;:{
                &quot;value&quot;:0
              },
              &quot;max&quot;:{
                &quot;value&quot;:&quot;1&quot;
              },
              &quot;type&quot;:[
                {
                  &quot;code&quot;:{
                    &quot;value&quot;:&quot;integer&quot;
                  }
                }
              ],
              &quot;condition&quot;:[
                
              ],
              &quot;isModifier&quot;:{
                &quot;value&quot;:false
              }
            }
          },
          {
            &quot;path&quot;:{
              &quot;value&quot;:&quot;Schedule.repeat.when&quot;
            },
            &quot;definition&quot;:{
              &quot;short&quot;:{
                &quot;value&quot;:&quot;Event occurs duration from common life event&quot;
              },
              &quot;formal&quot;:{
                &quot;value&quot;:&quot;Identifies the occurrence of daily life that determine timing.&quot;
              },
              &quot;min&quot;:{
                &quot;value&quot;:0
              },
              &quot;max&quot;:{
                &quot;value&quot;:&quot;1&quot;
              },
              &quot;type&quot;:[
                {
                  &quot;code&quot;:{
                    &quot;value&quot;:&quot;code&quot;
                  }
                }
              ],
              &quot;condition&quot;:[
                
              ],
              &quot;isModifier&quot;:{
                &quot;value&quot;:false
              },
              &quot;binding&quot;:{
                &quot;value&quot;:&quot;EventTiming&quot;
              }
            }
          },
          {
            &quot;path&quot;:{
              &quot;value&quot;:&quot;Schedule.repeat.duration&quot;
            },
            &quot;definition&quot;:{
              &quot;short&quot;:{
                &quot;value&quot;:&quot;Repeating or event-related duration&quot;
              },
              &quot;formal&quot;:{
                &quot;value&quot;:&quot;How long each repetition should last.&quot;
              },
              &quot;min&quot;:{
                &quot;value&quot;:1
              },
              &quot;max&quot;:{
                &quot;value&quot;:&quot;1&quot;
              },
              &quot;type&quot;:[
                {
                  &quot;code&quot;:{
                    &quot;value&quot;:&quot;decimal&quot;
                  }
                }
              ],
              &quot;condition&quot;:[
                
              ],
              &quot;constraint&quot;:[
                {
                  &quot;key&quot;:{
                    &quot;value&quot;:&quot;4&quot;
                  },
                  &quot;name&quot;:{
                    &quot;value&quot;:&quot;Duration Positive&quot;
                  },
                  &quot;severity&quot;:{
                    &quot;value&quot;:&quot;error&quot;
                  },
                  &quot;human&quot;:{
                    &quot;value&quot;:&quot;duration must be a positive value&quot;
                  },
                  &quot;xpath&quot;:{
                    &quot;value&quot;:&quot;@value &gt; 0 or not(@value)&quot;
                  }
                }
              ],
              &quot;isModifier&quot;:{
                &quot;value&quot;:false
              }
            }
          },
          {
            &quot;path&quot;:{
              &quot;value&quot;:&quot;Schedule.repeat.units&quot;
            },
            &quot;definition&quot;:{
              &quot;short&quot;:{
                &quot;value&quot;:&quot;The units of time for the duration&quot;
              },
              &quot;formal&quot;:{
                &quot;value&quot;:&quot;The units of time for the duration.&quot;
              },
              &quot;min&quot;:{
                &quot;value&quot;:1
              },
              &quot;max&quot;:{
                &quot;value&quot;:&quot;1&quot;
              },
              &quot;type&quot;:[
                {
                  &quot;code&quot;:{
                    &quot;value&quot;:&quot;code&quot;
                  }
                }
              ],
              &quot;condition&quot;:[
                
              ],
              &quot;isModifier&quot;:{
                &quot;value&quot;:false
              },
              &quot;binding&quot;:{
                &quot;value&quot;:&quot;UnitsOfTime&quot;
              }
            }
          },
          {
            &quot;path&quot;:{
              &quot;value&quot;:&quot;Schedule.repeat.count&quot;
            },
            &quot;definition&quot;:{
              &quot;short&quot;:{
                &quot;value&quot;:&quot;Number of times to repeat&quot;
              },
              &quot;formal&quot;:{
                &quot;value&quot;:&quot;A total count of the desired number of repetitions.&quot;
              },
              &quot;comments&quot;:{
                &quot;value&quot;:&quot;An end need not be specified.&quot;
              },
              &quot;min&quot;:{
                &quot;value&quot;:0
              },
              &quot;max&quot;:{
                &quot;value&quot;:&quot;1&quot;
              },
              &quot;type&quot;:[
                {
                  &quot;code&quot;:{
                    &quot;value&quot;:&quot;integer&quot;
                  }
                }
              ],
              &quot;condition&quot;:[
                
              ],
              &quot;isModifier&quot;:{
                &quot;value&quot;:false
              }
            }
          },
          {
            &quot;path&quot;:{
              &quot;value&quot;:&quot;Schedule.repeat.end&quot;
            },
            &quot;definition&quot;:{
              &quot;short&quot;:{
                &quot;value&quot;:&quot;When to stop repeats&quot;
              },
              &quot;formal&quot;:{
                &quot;value&quot;:&quot;When to stop repeats.&quot;
              },
              &quot;comments&quot;:{
                &quot;value&quot;:&quot;An end need not be specified.&quot;
              },
              &quot;min&quot;:{
                &quot;value&quot;:0
              },
              &quot;max&quot;:{
                &quot;value&quot;:&quot;1&quot;
              },
              &quot;type&quot;:[
                {
                  &quot;code&quot;:{
                    &quot;value&quot;:&quot;dateTime&quot;
                  }
                }
              ],
              &quot;condition&quot;:[
                
              ],
              &quot;isModifier&quot;:{
                &quot;value&quot;:false
              }
            }
          }
        ]
      }
    ],
    &quot;binding&quot;:[
      {
        &quot;name&quot;:{
          &quot;value&quot;:&quot;UnitsOfTime&quot;
        },
        &quot;conformance&quot;:{
          &quot;value&quot;:&quot;required&quot;
        },
        &quot;referenceResource&quot;:{
          &quot;type&quot;:{
            &quot;value&quot;:&quot;ValueSet&quot;
          },
          &quot;reference&quot;:{
            &quot;value&quot;:&quot;http://hl7.org/fhir/vs/units-of-time&quot;
          }
        }
      },
      {
        &quot;name&quot;:{
          &quot;value&quot;:&quot;EventTiming&quot;
        },
        &quot;conformance&quot;:{
          &quot;value&quot;:&quot;required&quot;
        },
        &quot;referenceResource&quot;:{
          &quot;type&quot;:{
            &quot;value&quot;:&quot;ValueSet&quot;
          },
          &quot;reference&quot;:{
            &quot;value&quot;:&quot;http://hl7.org/fhir/vs/event-timing&quot;
          }
        }
      }
    ]
  }
}</pre>
</div>
</body>
</html>
